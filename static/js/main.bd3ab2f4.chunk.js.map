{"version":3,"sources":["Instrument.js","Player.js","App.js","ColorChanger.js","index.js"],"names":["type","frequency","volume","release","attack","Sound","source","options","Player","this","play","soprano","alto","tenor","bass","kick","setTimeout","stop","clap","tones","oct","instrument","voices","voiceName","inst","band","Pizzicato","Group","playToggle","dur","reverb","Effects","Reverb","time","decay","reverse","mix","ringModulator","RingModulator","speed","distortion","dubDelay","DubDelay","feedback","cutoff","quadrafuzz","Quadrafuzz","lowGain","midLowGain","midHighGain","highGain","playKickTrigger","setInterval","playClapTrigger","map","voice","addEffect","addSound","randNote","stopMusic","clearInterval","forEach","removeEffect","removeSound","clearTimeout","randNoteForVoice","range","baseOctave","note","root","Math","floor","random","length","substring","duration","noteToFreq","getHalfSteps","u","v","abs","sqrt","log","cos","PI","numSteps","pow","toFixed","dist","indexOf","changer","fps","transElement","document","body","currentColor","getElementBG","transHandler","targetColor","increment","distance","elm","bg","getComputedStyle","backgroundColor","match","split","i","parseInt","pop","arguments","round","min","max","color","num","push","colorArray1","colorArray2","distanceArray","incr","colorArray","hex","toString","join","generateRGB","calculateDistance","calculateIncrement","transition","style","rgb2hex","startTransition","App","state","player","setState","playMusic","stopTransition","className","id","fontFamily","marginTop","onClick","togglePlay","bind","href","src","alt","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bd3ab2f4.chunk.js","sourcesContent":["import { Sound } from 'pizzicato';\n/* \n\tType is a string of \"sine\", \"square\", \"triangle\", \"sawtooth\"\n\tFrequency is the Hz value of a note to be played when the sound is triggered (This value is optional and defaults to A4 @ 440Hz)\n\tVolume is a float representing the loudness of a sound between 0 (quietest) and 1 (loudest) \n\tRelease is a float representing the time a sound takes to fade out after being played between 0 (quick fade) and 1 (long fade)\n\tAttack is a float representing the intensity with which a note is played when it is first struck between 0 (softest) and 1 (strongest)\n\t*/\n\nexport default (type, frequency, volume, release, attack) => {\n\n\treturn new Sound({ \n          source: 'wave',\n          options: {\n          \tfrequency: frequency || 440,\n            type: type,\n            volume: volume,\n            release: release,\n            attack: attack\n          }\n        });\n\t}\n","import Pizzicato from \"pizzicato\";\nimport instrument from \"./Instrument.js\";\n\nexport default class Player {\n  constructor() {\n    this.play = {\n      soprano: {},\n      alto: {},\n      tenor: {},\n      bass: {},\n      kick: () => {\n        this.kick.play();\n        setTimeout(() => {\n          this.kick.stop();\n        }, 250);\n      },\n      clap: () => {\n        this.clap.play();\n        setTimeout(() => {\n          this.clap.stop();\n        }, 250);\n      },\n    };\n    this.tones = [\n      \"C\",\n      \"C#\",\n      \"D\",\n      \"D#\",\n      \"E\",\n      \"F\",\n      \"F#\",\n      \"G\",\n      \"G#\",\n      \"A\",\n      \"A#\",\n      \"B\",\n    ];\n    this.oct = [2, 3, 4, 5, 6];\n    this.kick = instrument(\"sine\", 130.8, 0.2, 0.6, 0);\n    this.clap = instrument(\"sawtooth\", 261.6, 0.05, 1.5, 0);\n    this.voices = [\n      {\n        voiceName: \"soprano\",\n        inst: instrument(\"triangle\", null, 0.2, 1, 1),\n      },\n      {\n        voiceName: \"alto\",\n        inst: instrument(\"sine\", null, 0.2, 1, 1),\n      },\n      {\n        voiceName: \"tenor\",\n        inst: instrument(\"square\", null, 0.1, 1, 1),\n      },\n      {\n        voiceName: \"bass\",\n        inst: instrument(\"sine\", null, 0.3, 1, 1),\n      },\n    ];\n\n    this.band = new Pizzicato.Group();\n    this.playToggle = false;\n    this.dur = 1000;\n\n    this.reverb = new Pizzicato.Effects.Reverb({\n      time: 1,\n      decay: 0.8,\n      reverse: true,\n      mix: 0.9,\n    });\n    this.ringModulator = new Pizzicato.Effects.RingModulator({\n      speed: 1,\n      distortion: 1,\n      mix: 0.1,\n    });\n\n    this.dubDelay = new Pizzicato.Effects.DubDelay({\n      feedback: 0.2,\n      time: 0.7,\n      mix: 0.1,\n      cutoff: 3000,\n    });\n    this.quadrafuzz = new Pizzicato.Effects.Quadrafuzz({\n      lowGain: 0.6,\n      midLowGain: 0.8,\n      midHighGain: 0,\n      highGain: 0,\n    });\n    /* Additional setup */\n    // this.kick.addEffect(this.dubDelay);\n    // this.clap.addEffect(this.quadrafuzz);\n  }\n  // playKickBeat() {\n  //   this.kick.play();\n  //   setTimeout(() => this.kick.stop(), 250);\n  // }\n  // playClapBeat() {\n  //   this.clap.play();\n  //   setTimeout(() => this.clap.stop(), 250);\n  // }\n  playMusic(playToggle) {\n    if (!playToggle) {\n      /* Clear triggers and remove effects to stop music */\n      this.stopMusic();\n    } else {\n      this.playKickTrigger = setInterval(this.play.kick, 1000);\n      this.playClapTrigger = setInterval(this.play.clap, 2000);\n      this.voices.map((voice) => {\n        if (voice.voiceName === \"soprano\") {\n          voice.inst.addEffect(this.ringModulator);\n        }\n        this.band.addSound(voice.inst);\n        this.randNote(voice);\n        return null;\n      });\n      this.band.addEffect(this.reverb);\n      this.band.addEffect(this.dubDelay);\n    }\n  }\n  stopMusic() {\n    clearInterval(this.playClapTrigger);\n    clearInterval(this.playKickTrigger);\n    this.voices.forEach((voice) => {\n      voice.inst.stop();\n      if (voice.voiceName === \"soprano\") {\n        voice.inst.removeEffect(this.ringModulator);\n      }\n      this.band.removeSound(voice.inst);\n      return null;\n    });\n    clearTimeout(this.play.soprano);\n    clearTimeout(this.play.alto);\n    clearTimeout(this.play.tenor);\n    clearTimeout(this.play.bass);\n    this.band.removeEffect(this.reverb);\n    this.band.removeEffect(this.dubDelay);\n  }\n  randNote(voice) {\n    switch (voice.voiceName) {\n      case \"soprano\":\n        this.randNoteForVoice(voice, 3, 4);\n        break;\n      case \"alto\":\n        this.randNoteForVoice(voice, 3, 3);\n        break;\n      case \"tenor\":\n        this.randNoteForVoice(voice, 2, 3);\n        break;\n      case \"bass\":\n        this.randNoteForVoice(voice, 3, 2);\n        break;\n      default:\n        break;\n    }\n  }\n  randNoteForVoice(voice, range, baseOctave) {\n    let note = {\n      voice: voice.voiceName,\n      root: this.tones[Math.floor(Math.random() * this.tones.length)].substring(\n        0,\n        1\n      ),\n      oct: Math.floor(Math.random() * range) + baseOctave,\n      duration: (Math.floor(Math.random() * 8 + 1) * 1000) / 2,\n    };\n    this.dur = note.duration;\n    // document.getElementById(voice.voiceName).innerHTML += note.root + note.oct + \"&nbsp&nbsp\";\n    voice.inst.frequency = this.noteToFreq(this.getHalfSteps(note));\n    voice.inst.volume = note.oct > 5 ? 0.05 : 0.2;\n    voice.inst.play();\n\n    this.play[voice.voiceName] = setTimeout(() => {\n      this.randNoteForVoice(voice, range, baseOctave);\n    }, this.dur);\n  }\n  rand_oct() {\n    var u = 1 - Math.random(); // Subtraction to flip [0, 1) to (0, 1].\n    var v = 1 - Math.random();\n    return (\n      Math.abs(\n        Math.floor(\n          Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) * 2\n        )\n      ) + 1\n    );\n  }\n  noteToFreq(numSteps) {\n    return +(440 * Math.pow(Math.pow(2, 1 / 12), numSteps)).toFixed(2);\n  }\n  getHalfSteps(note) {\n    // var base = \"A\",\n    // baseOct = 4;\n    let dist = 0;\n    dist += note.oct * 12 - 48 + (this.tones.indexOf(note.root) - 9);\n    return dist;\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Player from \"./Player.js\";\n\nimport ColorChanger from \"./ColorChanger.js\";\n\nconst changer = new ColorChanger();\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      playToggle: false,\n      player: new Player(),\n    };\n  }\n  togglePlay() {\n    this.setState(\n      {\n        playToggle: !this.state.playToggle,\n      },\n      () => {\n        this.state.player.playMusic(this.state.playToggle);\n        this.state.playToggle\n          ? changer.startTransition()\n          : changer.stopTransition();\n      }\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"header\">\n          Transient composes and plays programmatically \"okay\" music.\n          <br />\n          Indefinitely.\n          <div style={{ fontFamily: \"monospace\", marginTop: \"1em\" }}>\n            You may wish to lower your volume, just in case!\n          </div>\n        </div>\n        <button id=\"play\" onClick={this.togglePlay.bind(this)}>\n          {this.state.playToggle ? \"Stop\" : \"Play\"}\n        </button>\n        <div id=\"credit\">\n          Procedurally Composed Machine Music <br /> Built with\n          <div id=\"logo-wrapper\">\n            <a href=\"https://github.com/alemangui/pizzicato\">\n              <div>Pizzicato.js</div>\n              <img\n                id=\"pizzi-logo\"\n                src=\"https://alemangui.github.io/pizzicato/favicon.png\"\n                alt=\"Pizzicato.js\"\n              />\n            </a>\n            <a href=\"https://reactjs.org/\">\n              <img id=\"react-logo\" src=\"./download.svg\" />\n              <div>React</div>\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export default class ColorChanger {\n\t/* \n\tDuration is not what it says. It's a multiplier in the calculateIncrement() function.\n\tduration = 1-4, fast-to-slow\n\t*/\n\tconstructor(){\n\t\tthis.fps             = 60;\n\t\tthis.duration        = 1;\n\t\tthis.transElement    = document.body;\n\t\tthis.currentColor    = this.getElementBG(this.transElement);\n\t\tthis.transHandler    = null;\n\t\tthis.targetColor \t  = null;\n\t\tthis.increment \t\t= null;\n\t\tthis.distance \t\t= null;\n\t}\n\t/* \n\tThis is required to get the initial background-color of an element.\n\tThe element might have it's bg-color already set before the transition.\n\tTransition should continue/start from this color.\n\tThis will be used only once.\n\t*/\n\tgetElementBG(elm) {\n\t\tlet bg  = getComputedStyle(elm).backgroundColor;\n\t\tbg  = bg.match(/\\((.*)\\)/)[1];\n\t\tbg  = bg.split(\",\");\n\t\tfor (let i = 0; i < bg.length; i++) {\n\t\t\tbg[i] = parseInt(bg[i], 10);\n\t\t}\n\t\tif (bg.length > 3) { bg.pop(); }\n\t\treturn bg;\n\t}\n\n\t/*\n\t A function to generate random numbers.\n\t Will be needed to generate random RGB value between 0-255.\n\t */\n\t random() {\n\t \tif (arguments.length > 2) {\n\t \t\treturn 0;\n\t \t}\n\t \tswitch (arguments.length) {\n\t \t\tcase 0:\n\t \t\treturn Math.random();\n\t \t\tcase 1:\n\t \t\treturn Math.round(Math.random() * arguments[0]);\n\t \t\tcase 2:\n\t \t\tlet min = arguments[0];\n\t \t\tlet max = arguments[1];\n\t \t\treturn Math.round(Math.random() * (max - min) + min);\n\t \t}\n\t }\n\n\t /* Generates a random RGB value. */\n\t generateRGB(min, max) {\n\t \tmin     = min || 0;\n\t \tmax     = min || 255;\n\t \tlet color   = [];\n\t \tfor (let i = 0; i < 3; i++) {\n\t \t\tlet num = this.random(min, max);\n\t \t\tcolor.push(num);\n\t \t}\n\t \treturn color;\n\t }\n\n\t/*\n\t Calculates the distance between the RGB values.\n\t We need to know the distance between two colors\n\t so that we can calculate the increment values for R, G, and B.\n\t */\n\t calculateDistance(colorArray1, colorArray2) {\n\t \tlet distance = [];\n\t \tfor (let i = 0; i < colorArray1.length; i++) {\n\t \t\tdistance.push(Math.abs(colorArray1[i] - colorArray2[i]));\n\t \t}\n\t \treturn distance;\n\t }\n\n\t/*\n\t Calculates the increment values for R, G, and B using distance, fps, and duration.\n\t This calculation can be made in many different ways.\n\t */\n\t calculateIncrement(distanceArray, fps, duration) {\n\t \tfps         = this.fps || 60;\n\t \tduration    = this.duration || 1;\n\t \tlet increment   = [];\n\t \tfor (let i = 0; i < distanceArray.length; i++) {\n\t \t\tlet incr = Math.abs(Math.floor(distanceArray[i] / (fps * duration)));\n\t \t\tif (incr === 0) {\n\t \t\t\tincr = 1;\n\t \t\t}\n\t \t\tincrement.push(incr);\n\t \t}\n\t \treturn increment;\n\t }\n\n\t/* \n\tConverts RGB array [32,64,128] to HEX string #204080\n\tIt's easier to apply HEX color than RGB color.\n\t*/\n\trgb2hex(colorArray) {\n\t\tlet color = [];\n\t\tfor (let i = 0; i < colorArray.length; i++) {\n\t\t\tlet hex = colorArray[i].toString(16);\n\t\t\tif (hex.length < 2) { hex = \"0\" + hex; }\n\t\t\tcolor.push(hex);\n\t\t}\n\t\treturn \"#\" + color.join(\"\");\n\t}\n\n\tstartTransition() {\n\t\tclearInterval(this.transHandler);\n\n\t\tthis.targetColor = this.generateRGB();\n\t\tthis.distance    = this.calculateDistance(this.currentColor, this.targetColor);\n\t\tthis.increment   = this.calculateIncrement(this.distance, this.fps, this.duration);\n\n\t\tthis.transHandler = setInterval(() => {\n\t\t\tthis.transition();\n\t\t}, 1000/this.fps);\n\t}\n\tstopTransition(){\n\t\tclearInterval(this.transHandler);\n\t}\n\ttransition() {\n\t\t/* checking R */\n\t\tif (this.currentColor[0] > this.targetColor[0]) {\n\t\t\tthis.currentColor[0] -= this.increment[0];\n\t\t\tif (this.currentColor[0] <= this.targetColor[0]) {\n\t\t\t\tthis.increment[0] = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentColor[0] += this.increment[0];\n\t\t\tif (this.currentColor[0] >= this.targetColor[0]) {\n\t\t\t\tthis.increment[0] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/* checking G */\n\t\tif (this.currentColor[1] > this.targetColor[1]) {\n\t\t\tthis.currentColor[1] -= this.increment[1];\n\t\t\tif (this.currentColor[1] <= this.targetColor[1]) {\n\t\t\t\tthis.increment[1] = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentColor[1] += this.increment[1];\n\t\t\tif (this.currentColor[1] >= this.targetColor[1]) {\n\t\t\t\tthis.increment[1] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/* checking B */\n\t\tif (this.currentColor[2] > this.targetColor[2]) {\n\t\t\tthis.currentColor[2] -= this.increment[2];\n\t\t\tif (this.currentColor[2] <= this.targetColor[2]) {\n\t\t\t\tthis.increment[2] = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentColor[2] += this.increment[2];\n\t\t\tif (this.currentColor[2] >= this.targetColor[2]) {\n\t\t\t\tthis.increment[2] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/* applying the new modified color */\n\t\tthis.transElement.style.backgroundColor = this.rgb2hex(this.currentColor);\n\n\t\t/* transition ended. start a new one */\n\t\tif (this.increment[0] === 0 && this.increment[1] === 0 && this.increment[2] === 0) {\n\t\t\tthis.startTransition();\n\t\t}\n\t}\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}